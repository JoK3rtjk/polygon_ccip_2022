import '../scss/app.scss';
import Web3 from "../../node_modules/web3";
// import img from "../images/design/heading.png";
// var putImg =  document.createElement('img');
// let findOwner = document.getElementById("inquireContainer");
// putImg.src = bg;
// document.getElementById("putimgRef").appendChild(putImg);
const bytecode = "0x60806040526000600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200005357600080fd5b5060405162001d4838038062001d488339818101604052810190620000799190620003c3565b86600090805190602001906200009192919062000267565b5085600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460029080519060200190620000eb92919062000267565b5083600390805190602001906200010492919062000267565b50816006819055506000600960146101000a81548160ff02191690836002811115620001355762000134620007c3565b5b0217905550600183141562000180576000600560006101000a81548160ff021916908360028111156200016d576200016c620007c3565b5b02179055506001600781905550620001fd565b6002831415620001c6576001600560006101000a81548160ff02191690836002811115620001b357620001b2620007c3565b5b0217905550600a600781905550620001fc565b6002600560006101000a81548160ff02191690836002811115620001ef57620001ee620007c3565b5b0217905550806007819055505b5b7fc7e5dc57beebc7c030a25d0610b215d034a834c35bfd92f6c19918e371cfc6ca6000428860026003600560009054906101000a900460ff166006546007546040516200025298979695949392919062000592565b60405180910390a150505050505050620008c0565b828054620002759062000757565b90600052602060002090601f016020900481019282620002995760008555620002e5565b82601f10620002b457805160ff1916838001178555620002e5565b82800160010185558215620002e5579182015b82811115620002e4578251825591602001919060010190620002c7565b5b509050620002f49190620002f8565b5090565b5b8082111562000313576000816000905550600101620002f9565b5090565b60006200032e62000328846200065e565b62000635565b9050828152602081018484840111156200034d576200034c62000855565b5b6200035a84828562000721565b509392505050565b60008151905062000373816200088c565b92915050565b600082601f83011262000391576200039062000850565b5b8151620003a384826020860162000317565b91505092915050565b600081519050620003bd81620008a6565b92915050565b600080600080600080600060e0888a031215620003e557620003e46200085f565b5b600088015167ffffffffffffffff8111156200040657620004056200085a565b5b620004148a828b0162000379565b9750506020620004278a828b0162000362565b965050604088015167ffffffffffffffff8111156200044b576200044a6200085a565b5b620004598a828b0162000379565b955050606088015167ffffffffffffffff8111156200047d576200047c6200085a565b5b6200048b8a828b0162000379565b94505060806200049e8a828b01620003ac565b93505060a0620004b18a828b01620003ac565b92505060c0620004c48a828b01620003ac565b91505092959891949750929550565b620004de81620006ba565b82525050565b620004ef816200070d565b82525050565b60008154620005048162000757565b620005108186620006a9565b945060018216600081146200052e5760018114620005415762000578565b60ff198316865260208601935062000578565b6200054c8562000694565b60005b8381101562000570578154818901526001820191506020810190506200054f565b808801955050505b50505092915050565b6200058c8162000703565b82525050565b6000610100820190508181036000830152620005af818b620004f5565b9050620005c0602083018a62000581565b620005cf6040830189620004d3565b8181036060830152620005e38188620004f5565b90508181036080830152620005f98187620004f5565b90506200060a60a0830186620004e4565b6200061960c083018562000581565b6200062860e083018462000581565b9998505050505050505050565b60006200064162000654565b90506200064f82826200078d565b919050565b6000604051905090565b600067ffffffffffffffff8211156200067c576200067b62000821565b5b620006878262000864565b9050602081019050919050565b60008190508160005260206000209050919050565b600082825260208201905092915050565b6000620006c782620006e3565b9050919050565b6000819050620006de8262000875565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200071a82620006ce565b9050919050565b60005b838110156200074157808201518184015260208101905062000724565b8381111562000751576000848401525b50505050565b600060028204905060018216806200077057607f821691505b60208210811415620007875762000786620007f2565b5b50919050565b620007988262000864565b810181811067ffffffffffffffff82111715620007ba57620007b962000821565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60038110620008895762000888620007c3565b5b50565b6200089781620006ba565b8114620008a357600080fd5b50565b620008b18162000703565b8114620008bd57600080fd5b50565b61147880620008d06000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631a695230146100675780636a62784214610083578063893d20e81461009f578063a4874d77146100bd578063d321fe29146100c7578063daea85c5146100e5575b600080fd5b610081600480360381019061007c9190610aee565b610115565b005b61009d60048036038101906100989190610aee565b610209565b005b6100a76102a5565b6040516100b49190610d25565b60405180910390f35b6100c56102cf565b005b6100cf610481565b6040516100dc9190610fda565b60405180910390f35b6100ff60048036038101906100fa9190610aee565b61048b565b60405161010c9190610e3f565b60405180910390f35b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806101be5750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6101fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f490610f7a565b60405180910390fd5b6102068161052f565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029090610f3a565b60405180910390fd5b6102a2816106da565b50565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035690610f9a565b60405180910390fd5b600160028111156103735761037261108c565b5b600960149054906101000a900460ff1660028111156103955761039461108c565b5b146103d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cc90610e7a565b60405180910390fd5b6002600960146101000a81548160ff021916908360028111156103fb576103fa61108c565b5b021790555060006040518060a00160405280606481526020016113df6064913990507fab3df575544970fcb36165d40e8f94ae67c1c1b9c9bb4b9c9db3320f7ccd9aea600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1642600754846040516104769493929190610df3565b60405180910390a150565b6000600754905090565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461051d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051490610f9a565b60405180910390fd5b61052682610974565b60019050919050565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561059f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059690610eda565b60405180910390fd5b600160028111156105b3576105b261108c565b5b600960149054906101000a900460ff1660028111156105d5576105d461108c565b5b14610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90610e5a565b60405180910390fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2e48574e89108f272024eec65c8d0780b12cdcaf8768e45745e07a3c3a05fe133382426007546040516106cf9493929190610d77565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561076b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076290610e9a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156107db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d290610eba565b60405180910390fd5b600160028111156107ef576107ee61108c565b5b600960149054906101000a900460ff1660028111156108115761081061108c565b5b1415610852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084990610efa565b60405180910390fd5b6002808111156108655761086461108c565b5b600960149054906101000a900460ff1660028111156108875761088661108c565b5b14156108c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bf90610f1a565b60405180910390fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600960146101000a81548160ff0219169083600281111561092f5761092e61108c565b5b02179055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc79560814260075460405161096993929190610dbc565b60405180910390a150565b600160028111156109885761098761108c565b5b600960149054906101000a900460ff1660028111156109aa576109a961108c565b5b146109ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e190610f5a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5190610fba565b60405180910390fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338242604051610ace93929190610d40565b60405180910390a150565b600081359050610ae8816113c7565b92915050565b600060208284031215610b0457610b036110bb565b5b6000610b1284828501610ad9565b91505092915050565b610b2481611011565b82525050565b610b3381611023565b82525050565b6000610b4482610ff5565b610b4e8185611000565b9350610b5e818560208601611059565b610b67816110c0565b840191505092915050565b6000610b7f601e83611000565b9150610b8a826110d1565b602082019050919050565b6000610ba2602983611000565b9150610bad826110fa565b604082019050919050565b6000610bc5602483611000565b9150610bd082611149565b604082019050919050565b6000610be8601083611000565b9150610bf382611198565b602082019050919050565b6000610c0b601f83611000565b9150610c16826111c1565b602082019050919050565b6000610c2e604283611000565b9150610c39826111ea565b606082019050919050565b6000610c51603783611000565b9150610c5c8261125f565b604082019050919050565b6000610c74601d83611000565b9150610c7f826112ae565b602082019050919050565b6000610c97601e83611000565b9150610ca2826112d7565b602082019050919050565b6000610cba603683611000565b9150610cc582611300565b604082019050919050565b6000610cdd602183611000565b9150610ce88261134f565b604082019050919050565b6000610d00601c83611000565b9150610d0b8261139e565b602082019050919050565b610d1f8161104f565b82525050565b6000602082019050610d3a6000830184610b1b565b92915050565b6000606082019050610d556000830186610b1b565b610d626020830185610b1b565b610d6f6040830184610d16565b949350505050565b6000608082019050610d8c6000830187610b1b565b610d996020830186610b1b565b610da66040830185610d16565b610db36060830184610d16565b95945050505050565b6000606082019050610dd16000830186610b1b565b610dde6020830185610d16565b610deb6040830184610d16565b949350505050565b6000608082019050610e086000830187610b1b565b610e156020830186610d16565b610e226040830185610d16565b8181036060830152610e348184610b39565b905095945050505050565b6000602082019050610e546000830184610b2a565b92915050565b60006020820190508181036000830152610e7381610b72565b9050919050565b60006020820190508181036000830152610e9381610b95565b9050919050565b60006020820190508181036000830152610eb381610bb8565b9050919050565b60006020820190508181036000830152610ed381610bdb565b9050919050565b60006020820190508181036000830152610ef381610bfe565b9050919050565b60006020820190508181036000830152610f1381610c21565b9050919050565b60006020820190508181036000830152610f3381610c44565b9050919050565b60006020820190508181036000830152610f5381610c67565b9050919050565b60006020820190508181036000830152610f7381610c8a565b9050919050565b60006020820190508181036000830152610f9381610cad565b9050919050565b60006020820190508181036000830152610fb381610cd0565b9050919050565b60006020820190508181036000830152610fd381610cf3565b9050919050565b6000602082019050610fef6000830184610d16565b92915050565b600081519050919050565b600082825260208201905092915050565b600061101c8261102f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561107757808201518184015260208101905061105c565b83811115611086576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f43434950206973206e6f7420696e20616e204163746976652073746174650000600082015250565b7f434349502069732063757272656e746c79206e6f7420696e20616e206163746960008201527f7665207374617475730000000000000000000000000000000000000000000000602082015250565b7f4f776e65722063616e6e6f7420626520436172626f6e2043726564697420497360008201527f7375657200000000000000000000000000000000000000000000000000000000602082015250565b7f63616e6e6f74206d696e7420746f203000000000000000000000000000000000600082015250565b7f434349502063616e6e6f74206265207472616e7366657272656420746f203000600082015250565b7f434349502068617320616c7265616479206265656e206d696e7465642c20706c60008201527f6561736520757365207472616e7366657220746f206368616e6765206f776e6560208201527f7273000000000000000000000000000000000000000000000000000000000000604082015250565b7f434349502068617320616c7265616479206265656e20726574697265642c207060008201527f6c65617365206465706c6f792061206e65772043434950000000000000000000602082015250565b7f4f6e6c7920636172626f6e2072656769737472792063616e206d696e74000000600082015250565b7f43434950206973206e6f7420696e20616e206163746976652073746174650000600082015250565b7f4f6e6c792076616c696420666f7220434349502063757272656e74206f776e6560008201527f7273206f7220617070726f766564206164647265737300000000000000000000602082015250565b7f4f6e6c792076616c696420666f7220434349502063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f417070726f76656420616464726573732063616e6e6f74206265203000000000600082015250565b6113d081611011565b81146113db57600080fd5b5056fe5468616e6b20796f7520666f7220646f696e6720796f757220706172742c2074686520616d6f756e74206f6620636172626f6e20656d697373696f6e20796f752068617665206f66667365742069732073756363657366756c6c79207265746972656421a2646970667358221220732f4d344b24f46cb4394b000a76782e63513662a041bb89d2209dde14ace7a864736f6c63430008070033"
const abi = [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "carbon_registry_org",
				"type": "string"
			},
			{
				"internalType": "address",
				"name": "cci_address",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "organisation",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "cciptype",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "year",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "amt",
				"type": "uint256"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "ccip_owner",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "address",
				"name": "approved_operator",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "string",
				"name": "nameCarbonReg",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "address",
				"name": "addressIssuer",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "nameProject",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "nameOrg",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "enum ccip.ccip_type",
				"name": "cciptype",
				"type": "uint8"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "year",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "offsetAmount",
				"type": "uint256"
			}
		],
		"name": "CCIPdeployed",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "ccipOwner",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "offsetAmt",
				"type": "uint256"
			}
		],
		"name": "mintEvent",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "ccip_owner",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "offsetAmt",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "message",
				"type": "string"
			}
		],
		"name": "retireCCIP",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "ccip_currentOwner",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "address",
				"name": "ccip_newOwner",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "offsetAmt",
				"type": "uint256"
			}
		],
		"name": "transferEvent",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_approved",
				"type": "address"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getAmount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getOwner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_toOwner",
				"type": "address"
			}
		],
		"name": "mint",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "retire",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_to",
				"type": "address"
			}
		],
		"name": "transfer",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]


/* Your JS Code goes here */
const App = {
    web3: null,
    account: null,
    meta: null,
  
    start: async function() {
      const { web3 } = this;
    try {
        // get contract instance
        const networkId = await web3.eth.net.getId();
  
        // get accounts
        const accounts = await web3.eth.getAccounts();
        this.account = accounts[0];
        console.log(this.account)
  
      //   this.refreshBalance();
      } catch (error) {
        console.error("Could not connect to contract or chain.");
      }
    },
  
    refreshBalance: async function() {
      const { getBalance } = this.meta.methods;
      const balance = await getBalance(this.account).call();
  
      const balanceElement = document.getElementsByClassName("balance")[0];
      balanceElement.innerHTML = balance;
    },
	// To do, update the code to reflect ccipType 
    deployContract: async function() {
      const cc = new this.web3.eth.Contract(abi);
      const CarbonRegistry = document.getElementById("CBO").value;
      const wallet = this.account;
      const projectName = document.getElementById("Project").value;
      const Org = document.getElementById("Organisation").value;
	  const ccip_type = document.getElementById("ccipType").value
	  const vintageYr = document.getElementById("vintageYear").value;
      const offsetAmt = document.getElementById("OffsetAmt").value;
      console.log(CarbonRegistry);
      let parameter = {
        from: this.account,
        gas: this.web3.utils.toHex(20000000),
        gasPrice: this.web3.utils.toHex(this.web3.utils.toWei('20000000000', 'wei'))
      }
      let payload = {
        data: bytecode,
        arguments:[
          CarbonRegistry,
          wallet,
          projectName,
          Org,
		  ccip_type,
		  vintageYr,
		  offsetAmt,
		  
        ]
      }
      cc.deploy(payload).send(parameter, (err, transactionHash) => {
        console.log('Transaction Hash :', transactionHash);
		// location.href(document.getElementById("Next"));
      })
    },
  
    mint: async function() {
      let contractAddress = document.getElementById("CCIPcontract").value;
      let CCIPowner = document.getElementById("addressOwner").value;
      this.ccipRef = new this.web3.eth.Contract(abi,contractAddress);
      console.log(CCIPowner);
      const {mint} = this.ccipRef.methods;
      await mint(CCIPowner).send({from: this.account}, (err, transactionHash) => {
		console.log('Transaction Hash :', transactionHash);
	  })
    },
  
    transfer: async function(){
      let contractAddress = document.getElementById("CCIPcontract1").value;
      // let CCIPowner_xf = document.getElementById("CCIPowner_xf").value;
      let to_newOwner = document.getElementById("addressOwner1").value;
      this.ccipRef = new this.web3.eth.Contract(abi,contractAddress);
      const {transfer} = this.ccipRef.methods;
      await transfer(to_newOwner).send({from:this.account});
  
    },
  
    retire: async function (){
    let contractAddress = document.getElementById("CCIPcontract2").value;
	this.ccipRef = new this.web3.eth.Contract(abi,contractAddress);
    const {retire} = this.ccipRef.methods;
    await retire().send({from: this.account});
    },

	getOwner: async function (){
		let contractAddress = document.getElementById("CCIPcontract3").value;
		// this.ccipRef = new this.web3.eth.Contract(contractAddress);
		this.ccipRef = new this.web3.eth.Contract(abi,contractAddress);
		const {getOwner} = this.ccipRef.methods;
		let ccipOwner = await getOwner().call();
		console.log(ccipOwner);
		let ownerofCCIP = findOwner.appendChild('p');
		ownerofCCIP.innerHTML = "CCIP owner is: " + String(ccipOwner);

		// TODO: add CCIP owner: wallet address after btn is clicked
		let newDiv = document.getElementById("inquireContainer");
		newDiv.innerHTML = "The owner is: " + String(ccipOwner);
		
	},
    
  
  //   sendCoin: async function() {
  //     const amount = parseInt(document.getElementById("amount").value);
  //     const receiver = document.getElementById("receiver").value;
  
  //     this.setStatus("Initiating transaction... (please wait)");
  
  //     const { sendCoin } = this.meta.methods;
  //     await sendCoin(receiver, amount).send({ from: this.account });
  
  //     this.setStatus("Transaction complete!");
  //     this.refreshBalance();
  //   },
  
  //   setStatus: function(message) {
  //     const status = document.getElementById("status");
  //     status.innerHTML = message;
  //   },
  };
  
  window.App = App;
  
  window.addEventListener("load", function() {
    if (window.ethereum) {
      // use MetaMask's provider
      App.web3 = new Web3(window.ethereum);
      window.ethereum.enable(); // get permission to access accounts
    } else {
      console.warn(
        "No web3 detected. Falling back to http://127.0.0.1:8545. You should remove this fallback when you deploy live",
      );
      // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
      App.web3 = new Web3(
        new Web3.providers.HttpProvider("http://127.0.0.1:8545"),
      );
    }
  
    App.start();
  });
  


/* Demo JS */
// import './demo.js';
